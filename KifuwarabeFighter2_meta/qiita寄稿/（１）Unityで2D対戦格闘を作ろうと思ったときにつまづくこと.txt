![201701112246a1.png](https://qiita-image-store.s3.amazonaws.com/0/159417/b16a48ff-d7f6-f70d-7eb9-67c7204b7424.png)

Open source(Git Hub) https://github.com/muzudho/KifuwarabeFighter2


何が　“壁”　なのか？
===================
**体感１位　パンチ、キック等の人体を１キャラ分揃えたいと思ったとき**
分類：一般論、クリエイター

![201701111215a13.png](https://qiita-image-store.s3.amazonaws.com/0/159417/6bcba647-a107-4aa5-4436-ec5b4f27bb36.png)

絵を描くこと（１）　×　描きなおした回数（３）　×　キャラ数（３）　＝　でかい壁（９）

上掲の１枚の画像をぱっと見て簡単だな、と思ったおよそ　９倍　は時間を食う。

**教訓（解決可能）**
最初に２Ｄ格闘ゲームを作ろうと思ったクリエイターは、模型人形ファイター２　あるいは　白い豆腐ファイター２　にしておくと　「絵を描くこと（１）」が小さな数字になるので、「でかい壁（９）」も小さな数字になるだろう。これで、この壁は解決できる。

**トレードオフして失うもの（プラス面）**
画面を早く見たくて　キャラ絵を描いた。できあがっていく画面を見ると「充実感」はどんどん上がっていく。

**トレードオフして解消するもの（マイナス面）**
なまじ当てはめられたキャラ絵が　１５分の１秒間隔で　１ドット　ぴくぴく　横にずれていて気になる。

----
**体感２位　当たり判定の座標をどう設定しようか**
分類：Unity、プログラマー

![201701101323a18.png](https://qiita-image-store.s3.amazonaws.com/0/159417/24dfaac3-8f29-d271-0867-f4efe1a22869.png)

テキストボックスの数（２（稀に４））　×　１モーションの枚数平均（３）　×　モーション数（３）　×　キャラ数（３）　×　仕様変更・キャラ描き直しの回数（２）　＝　でかい壁（１０８（稀に２１６））

まさか　１０８回も　テキストボックスに　0.25　といった数字をキータイピングすることになるのだろうか。萎える。自動化しないと。
上記画像では、PNG画像の赤い四角（RGB=255,0,0）から、Unityへの入力値（Offset X,Y、Scale X,Y）を調査するとこまでは AtarihanteiMaker.exe のダブルクリック１発にした。

**教訓（作業中）**
ググると２Ｄ当たり判定エディターは有るんだが、

- http://ameblo.jp/voldo55/entry-12030215712.html  
    - https://www.autoitscript.com/forum/topic/155891-2d-hitbox-editor/  

テキストボックスへの入力時間を減らしてくれるものではなさそうだ。
円形の当たり判定を付けたいときには役に立ちそうだ。
CSV形式からUnityへの取り込み部分の自動化を考え中。

無いものは自分で作る、自動化は任せろ、というコンピューター・プログラミングというスキルが初めて役に立つ場面ではあるが、１００円にもならない。ツールを作ってフリーで公開しておけば誰かが公式に取り込んでくれるだろう……。

**トレードオフして失うもの（プラス面）**
無職の時間がいくら減っても、損失するものも無い。

**トレードオフして解消するもの（マイナス面）**
テキストボックスへ１０８回入力すること。


